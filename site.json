{"config":{"title":"MichaelArnel.com","subtitle":"Developer, Technolgy Enthusiast, Family Man","description":null,"author":"Michael Arnel","email":"michael.arnel@gmail.com","language":"English","url":"http://michaelarnel.com","root":"/","permalink":":year/:month/:day/:title/","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","permalink_defaults":{},"source_dir":"source","public_dir":"public","new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":true,"relative_link":false,"highlight":{"enable":true,"line_number":true,"tab_replace":null},"default_category":"uncategorized","category_map":null,"tag_map":null,"archive":2,"category":2,"tag":2,"port":4000,"server_ip":"localhost","logger":false,"logger_format":null,"date_format":"MMM D YYYY","time_format":"H:mm:ss","per_page":10,"pagination_dir":"page","disqus_shortname":"michaelarnelcom","theme":"hueman","exclude_generator":null,"deploy":{"type":null},"auto_spacing":false,"max_open_file":100,"multi_thread":true,"markdown":{"gfm":true,"pedantic":false,"sanitize":false,"tables":true,"breaks":true,"smartLists":true,"smartypants":true},"stylus":{"compress":false}},"posts":[{"title":"Building A Website With Hexo.io","date":"2015-03-01T23:32:45.000Z","comments":true,"content":"<p>In my last article, I wrote about my personal experiences getting MichaelArnel.com up and running. This article covers using a Static Site Generator (SSG) to build your very own website. Static Site Generators are tools that take content in one format, such as Markdown, and transforms that content into another format, usually HTML and lays out pages so that the look and feel is consistent across the entire site.</p>\n<h4 id=\"Why_use_a_Static_Site_Generator?\">Why use a Static Site Generator?</h4>\n<p>There are many benefits to using SSG’s to build and maintain your site.</p>\n<ul>\n<li>Sites built using SSGs are static html, js, and css files which means it can be hosted on any platform by any webserver of your choice.</li>\n<li>Because the content is made up of flat text files, static sites are easy to version with source control tools like GIT.</li>\n<li>There is no server side code executing or database interactivity so static sites are much more secure and generally free from exploits.</li>\n<li>Static sites are extremely fast!!!</li>\n</ul>\n<p>Once you’ve decided to use a SSG to build your website with, it’s time to choose a SSG to use.  There are many tools out there for you to choose from.  It’s important to choose one that’s built on a platform your comfortable developing on, for example javascript, ruby, php, etc.  This is important because you want to be able to contribute to the project, or possibly fix bugs that might be impacting your site.  For the purposes of this tutorial i’ve chosen to use <a href=\"http://hexo.io\" target=\"_blank\" rel=\"external\">Hexo.io</a> which is built using JavaScript on Node.js  Hexo is also the same SSG I’ve used to build MichaelArnel.com</p>\n<p><img src=\"/2015/02/28/Building-A-Website-With-Hexo-io/logo.png\"></p>\n<p>This tutorial makes the assumption that you’re already familiar with NodeJS and already have it installed to your system.  If you need to install NodeJS please head on over to <a href=\"http://nodejs.org/\" target=\"_blank\" rel=\"external\">the node.js homepage</a> and follow the instructions there.  Once complete continue back over here.</p>\n<h2 id=\"Hexo_Quick_Setup:\">Hexo Quick Setup:</h2>\n<p>In order to install Hexo, you’ll need to open up the terminal or command line.  We’re going to use Node Package Manager (NPM) to install the hexo package globally.  Run the following command now:</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install -g hexo-<span class=\"keyword\">cli</span></div></pre></td></tr></table></figure>\n\n<p>Now that the hexo package is installed globally, use the terminal and navigate to the folder you want to create your website at.  Let’s assume we wanted to build a blog, to get started we would run the command below to initialize a hexo website.</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo <span class=\"keyword\">init</span> <span class=\"type\">Blog</span></div></pre></td></tr></table></figure>\n\n<p>After this command is run, a skeleton project is stubbed out and a new project folder called “Blog” is created, containing the files generated by Hexo.  Before we can fire up the server and see the site in action, we’ll have to run an npm command to install all the project dependencies. Switch to the new directory created by hexo and run the npm command below.</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">cd</span> Blog</div><div class=\"line\">npm install</div></pre></td></tr></table></figure>\n\n<p>At this point all the dependencies should be installed and your new Blog website is ready for you to run and explore. Run the following command to start the webserver.  After running the command you should see output by hexo letting you know that it’s running and how to stop it.</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo server</div><div class=\"line\">   &gt;&gt;Hexo is running <span class=\"keyword\">at</span> <span class=\"keyword\">http</span>://localhost:<span class=\"number\">4000</span>/. Press Ctrl+C <span class=\"built_in\">to</span> stop.</div></pre></td></tr></table></figure>\n\n<p>Your brand new Blog website is up and running now!  Open up a web browser and navigate to <a href=\"http://localhost:4000\" target=\"_blank\" rel=\"external\">http://localhost:4000</a>.  You should see something simular to the image below in your browser.<br><img src=\"/2015/02/28/Building-A-Website-With-Hexo-io/new-blog-site.png\"><br><strong>Pretty Cool!</strong> In less than 5 minutes you have a fully functional website up and running and all you’ve done is run a few commands from the command line.  Let’s start adding some content so we can customize it. Before we being let’s take a look at the directory contents created by hexo.  You should see something similar to the structure below.</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">├── _config.yml</div><div class=\"line\">├── package.json</div><div class=\"line\">├── scaffolds</div><div class=\"line\">├── scripts</div><div class=\"line\">├── source</div><div class=\"line\"><span class=\"string\">|   ├── _drafts</span></div><div class=\"line\"><span class=\"string\">|   └── _posts</span></div><div class=\"line\">└── themes</div></pre></td></tr></table></figure>\n\n<blockquote class=\"pullquote \">\n\n<p>Basic Configurations</p>\n</blockquote>\n\n\n<p>Inside the new project directory created, find and open the file <em>_config.yml</em>  This file is the configuration that drives the static site that’s generated by hexo.  It controls things about your site like title, author, url, paging settings and much much more.  Let’s start with some simple changes and modify the site configuration region to reflect the blog we’re building.</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"preprocessor\"># Site</span></div><div class=\"line\"><span class=\"label\">title:</span> My Cool New Blog</div><div class=\"line\"><span class=\"label\">subtitle:</span> Blogging cool stuff!</div><div class=\"line\"><span class=\"label\">description:</span></div><div class=\"line\"><span class=\"label\">author:</span> &lt;Your Name Here&gt;</div><div class=\"line\"><span class=\"label\">email:</span> &lt;Your Email Here&gt;</div><div class=\"line\"><span class=\"label\">language:</span> English</div><div class=\"line\"></div><div class=\"line\"><span class=\"preprocessor\"># URL</span></div><div class=\"line\"><span class=\"preprocessor\">## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'</span></div><div class=\"line\"><span class=\"label\">url:</span> http://mycoolblog.com</div><div class=\"line\"><span class=\"label\">root:</span> /</div></pre></td></tr></table></figure>\n\n<p>For now this is all we’ll modify in the <em>_config.yml</em>, save the file and close it.  To learn more about what the rest of settings in the <em>_config.yml</em> do, visit <a href=\"http://hexo.io/docs/\" target=\"_blank\" rel=\"external\">http://hexo.io/docs/</a> and explore the documentation.  The changes you’ve made to the *_config.yml won’t take place until you stop and restart the hexo server.  Use the command line and stop and restart the server now. Refresh the browser and take note of the changes.  You should now see the blog title and subtitle displayed in the page header!</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Press Ctrl+C <span class=\"keyword\">to</span> <span class=\"keyword\">stop</span></div><div class=\"line\">hexo <span class=\"built_in\">server</span></div></pre></td></tr></table></figure>\n\n<blockquote class=\"pullquote \">\n\n<p>Writing Some Content</p>\n</blockquote>\n\n\n<p>Writing content for your new blog is just as easy.  The first thing we need to do is tell Hexo to provision a new article.  This is done by going back to the command line and running the following command:</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo <span class=\"keyword\">new</span> Post MyFirstEntry</div></pre></td></tr></table></figure>\n\n<p><em>Note: There are 3 different types of content stubs you can generate out of the box with hexo.  The default is a Post, but you can also choose from Draft and Page documents as well.</em></p>\n<p>Hexo now generates a new file inside the _posts directory under the source folder at the root of your project.  Navigate to the _posts directory and you should now see a new file titled <em>MyFirstEntry.md</em>  This is a special file type known as Markdown.  Markdown is a simple to use text format for non-programming types to write in. That text is taken and then read in by a processor and converted to HTML.  This makes it super easy to quickly write down your thoughts and include things such as tables, page headings, blockquotes and more without using a bit of HTML Markup. <strong>COOL!</strong></p>\n<p>Play around writing some content and save the file. If you didn’t stop the server (Ctrl+C) in the previous step, when we created the new post, do so now, then restart.  We do this so that hexo can rebuild your site including the new content you’ve just added. Refresh the web browser and you should now see a new article linking to the content you just wrote.  Notice all the other cool things hexo did for you while generating the site. It’s automatically set up links to the article based on any categories and or tags you’ve specified in the <em>MyFirstEntry.md</em> file.  This is what makes your site static. Traditionally all of this processing would by done dynamically via server-side code at runtime.</p>\n<p>*Note: After the file is generated by hexo and the server is restarted, any changes you make to your content files are automatically picked up by the running hexo server.  This makes it easy to refresh and browser and quickly see the changes you’ve made while you work.</p>\n<blockquote class=\"pullquote \">\n\n<p>Generating Your Site for Deployment</p>\n</blockquote>\n\n\n<p>This is just the tip of the iceburg of what you can do with Hexo, but for the moment you’re but just one small step from being able to publish your website so that the rest of the world can see your work.  Stop the hexo server by going back to the command line and hitting Ctrl+C.  Run the following commands to build out your website for deployment:</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo clean</div><div class=\"line\">hexo <span class=\"keyword\">generate</span></div></pre></td></tr></table></figure>\n\n<p>The first command (<em>hexo clean</em>) run’s cleanup by hexo on the files it generates internally to track the content that makes up your website.  The second command (<em>hexo generate</em>) actually builds out the website and creates the files in a new folder called public in the root of your project folder.  This folder contains everything you need to copy your website to a webserver so that it can be hosted on the internet. That’s all there is to it, dust off your hands and pat yourself on the back. You’ve now just built out your first website using Hexo, and in less than an hour!</p>\n<blockquote class=\"pullquote \">\n\n<p>What’s Next?</p>\n</blockquote>\n\n\n<p>Time for you to go off and explore how you can use the rest of the Hexo tool to build your website. Check out the <a href=\"http://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for all the details you need to become a master of Hexo.  You might also want to take a look at the custom themes available, that others have built and shared to give your site a different look and feel.</p>\n<p>In Part 3 of this series we’ll explore how to manage your site using tools like GIT for source control, Grunt.js to automate certain aspects of the development of your site, and finally how to use Github to publish your source files and host your static site for free!</p>\n<p><span class=\"pull-left\"><a href=\"/2015/02/21/Hello-World/\">Prev: Hello World</a></span></p>\n","source":"_posts/Building-A-Website-With-Hexo-io.md","raw":"title: Building A Website With Hexo.io\ndate: 2015-03-01 18:32:45\ntags: Hexo\ncategories: Web Development\ncomments: true\n---\n\nIn my last article, I wrote about my personal experiences getting MichaelArnel.com up and running. This article covers using a Static Site Generator (SSG) to build your very own website. Static Site Generators are tools that take content in one format, such as Markdown, and transforms that content into another format, usually HTML and lays out pages so that the look and feel is consistent across the entire site.\n####Why use a Static Site Generator?\nThere are many benefits to using SSG's to build and maintain your site.\n- Sites built using SSGs are static html, js, and css files which means it can be hosted on any platform by any webserver of your choice.\n- Because the content is made up of flat text files, static sites are easy to version with source control tools like GIT.\n- There is no server side code executing or database interactivity so static sites are much more secure and generally free from exploits.\n- Static sites are extremely fast!!!\n\n\nOnce you've decided to use a SSG to build your website with, it's time to choose a SSG to use.  There are many tools out there for you to choose from.  It's important to choose one that's built on a platform your comfortable developing on, for example javascript, ruby, php, etc.  This is important because you want to be able to contribute to the project, or possibly fix bugs that might be impacting your site.  For the purposes of this tutorial i've chosen to use <a href=\"http://hexo.io\">Hexo.io</a> which is built using JavaScript on Node.js  Hexo is also the same SSG I've used to build MichaelArnel.com\n\n<img src=\"/2015/02/28/Building-A-Website-With-Hexo-io/logo.png\" />\n\nThis tutorial makes the assumption that you're already familiar with NodeJS and already have it installed to your system.  If you need to install NodeJS please head on over to <a href=\"http://nodejs.org/\">the node.js homepage</a> and follow the instructions there.  Once complete continue back over here.\n##Hexo Quick Setup:\nIn order to install Hexo, you'll need to open up the terminal or command line.  We're going to use Node Package Manager (NPM) to install the hexo package globally.  Run the following command now:\n\n{% codeblock %}\nnpm install -g hexo-cli\n{% endcodeblock %}\n\nNow that the hexo package is installed globally, use the terminal and navigate to the folder you want to create your website at.  Let's assume we wanted to build a blog, to get started we would run the command below to initialize a hexo website.\n\n{% codeblock %}\nhexo init Blog\n{% endcodeblock %}\n\nAfter this command is run, a skeleton project is stubbed out and a new project folder called \"Blog\" is created, containing the files generated by Hexo.  Before we can fire up the server and see the site in action, we'll have to run an npm command to install all the project dependencies. Switch to the new directory created by hexo and run the npm command below.\n\n{% codeblock %}\ncd Blog\nnpm install\n{% endcodeblock %}\n\nAt this point all the dependencies should be installed and your new Blog website is ready for you to run and explore. Run the following command to start the webserver.  After running the command you should see output by hexo letting you know that it's running and how to stop it.\n\n{% codeblock %}\nhexo server\n   >>Hexo is running at http://localhost:4000/. Press Ctrl+C to stop.\n{% endcodeblock %}\n\nYour brand new Blog website is up and running now!  Open up a web browser and navigate to http://localhost:4000.  You should see something simular to the image below in your browser.\n<img src=\"/2015/02/28/Building-A-Website-With-Hexo-io/new-blog-site.png\" />\n**Pretty Cool!** In less than 5 minutes you have a fully functional website up and running and all you've done is run a few commands from the command line.  Let's start adding some content so we can customize it. Before we being let's take a look at the directory contents created by hexo.  You should see something similar to the structure below.\n\n{% codeblock  %}\n├── _config.yml\n├── package.json\n├── scaffolds\n├── scripts\n├── source\n|   ├── _drafts\n|   └── _posts\n└── themes\n{% endcodeblock %}\n\n{% pullquote %}\nBasic Configurations\n{% endpullquote %}\n\nInside the new project directory created, find and open the file *_config.yml*  This file is the configuration that drives the static site that's generated by hexo.  It controls things about your site like title, author, url, paging settings and much much more.  Let's start with some simple changes and modify the site configuration region to reflect the blog we're building.\n\n{% codeblock %}\n# Site\ntitle: My Cool New Blog\nsubtitle: Blogging cool stuff!\ndescription:\nauthor: <Your Name Here>\nemail: <Your Email Here>\nlanguage: English\n\n# URL\n## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'\nurl: http://mycoolblog.com\nroot: /\n{% endcodeblock %}\n\nFor now this is all we'll modify in the *_config.yml*, save the file and close it.  To learn more about what the rest of settings in the *_config.yml* do, visit http://hexo.io/docs/ and explore the documentation.  The changes you've made to the *_config.yml won't take place until you stop and restart the hexo server.  Use the command line and stop and restart the server now. Refresh the browser and take note of the changes.  You should now see the blog title and subtitle displayed in the page header!\n\n{% codeblock %}\nPress Ctrl+C to stop\nhexo server\n{% endcodeblock %}\n\n{% pullquote %}\nWriting Some Content\n{% endpullquote %}\n\nWriting content for your new blog is just as easy.  The first thing we need to do is tell Hexo to provision a new article.  This is done by going back to the command line and running the following command:\n\n{% codeblock %}\nhexo new Post MyFirstEntry\n{% endcodeblock %}\n\n*Note: There are 3 different types of content stubs you can generate out of the box with hexo.  The default is a Post, but you can also choose from Draft and Page documents as well.*\n\nHexo now generates a new file inside the _posts directory under the source folder at the root of your project.  Navigate to the _posts directory and you should now see a new file titled *MyFirstEntry.md*  This is a special file type known as Markdown.  Markdown is a simple to use text format for non-programming types to write in. That text is taken and then read in by a processor and converted to HTML.  This makes it super easy to quickly write down your thoughts and include things such as tables, page headings, blockquotes and more without using a bit of HTML Markup. **COOL!**\n\nPlay around writing some content and save the file. If you didn't stop the server (Ctrl+C) in the previous step, when we created the new post, do so now, then restart.  We do this so that hexo can rebuild your site including the new content you've just added. Refresh the web browser and you should now see a new article linking to the content you just wrote.  Notice all the other cool things hexo did for you while generating the site. It's automatically set up links to the article based on any categories and or tags you've specified in the *MyFirstEntry.md* file.  This is what makes your site static. Traditionally all of this processing would by done dynamically via server-side code at runtime.\n\n*Note: After the file is generated by hexo and the server is restarted, any changes you make to your content files are automatically picked up by the running hexo server.  This makes it easy to refresh and browser and quickly see the changes you've made while you work.\n\n{% pullquote %}\nGenerating Your Site for Deployment\n{% endpullquote %}\n\nThis is just the tip of the iceburg of what you can do with Hexo, but for the moment you're but just one small step from being able to publish your website so that the rest of the world can see your work.  Stop the hexo server by going back to the command line and hitting Ctrl+C.  Run the following commands to build out your website for deployment:\n\n{% codeblock %}\nhexo clean\nhexo generate\n{% endcodeblock %}\n\nThe first command (*hexo clean*) run's cleanup by hexo on the files it generates internally to track the content that makes up your website.  The second command (*hexo generate*) actually builds out the website and creates the files in a new folder called public in the root of your project folder.  This folder contains everything you need to copy your website to a webserver so that it can be hosted on the internet. That's all there is to it, dust off your hands and pat yourself on the back. You've now just built out your first website using Hexo, and in less than an hour!\n\n{% pullquote %}\nWhat's Next?\n{% endpullquote %}\n\nTime for you to go off and explore how you can use the rest of the Hexo tool to build your website. Check out the <a href=\"http://hexo.io/docs/\">documentation</a> for all the details you need to become a master of Hexo.  You might also want to take a look at the custom themes available, that others have built and shared to give your site a different look and feel.\n\nIn Part 3 of this series we'll explore how to manage your site using tools like GIT for source control, Grunt.js to automate certain aspects of the development of your site, and finally how to use Github to publish your source files and host your static site for free!\n\n<span class=\"pull-left\"><a href=\"/2015/02/21/Hello-World/\">Prev: Hello World</a></span>","slug":"Building-A-Website-With-Hexo-io","updated":"2015-03-01T21:10:22.000Z","excerpt":"","_id":"r7ewh4ht47si7edh","layout":"post","photos":[],"link":"","path":"2015/03/01/Building-A-Website-With-Hexo-io/","permalink":"http://michaelarnel.com/2015/03/01/Building-A-Website-With-Hexo-io/","full_source":"/Users/marnel/WebProjects/MichaelArnelcom/source/_posts/Building-A-Website-With-Hexo-io.md","asset_dir":"/Users/marnel/WebProjects/MichaelArnelcom/source/_posts/Building-A-Website-With-Hexo-io/","tags":[{"name":"Hexo","_id":"lt0fuszygj5etqkb","posts":["r7ewh4ht47si7edh","k1c49e8si0g59eb1"],"slug":"Hexo","path":"tags/Hexo/","permalink":"http://michaelarnel.com/tags/Hexo/","length":2}],"categories":[{"name":"Web Development","_id":"z78uxvij8jx6l6kj","posts":["r7ewh4ht47si7edh","k1c49e8si0g59eb1"],"slug":"Web-Development","path":"categories/Web-Development/","permalink":"http://michaelarnel.com/categories/Web-Development/","length":2}]},{"title":"Hello-World","date":"2015-02-22T02:11:04.000Z","updated":"2015-03-01T05:00:00.000Z","comments":true,"content":"<p><img id=\"HelloWorldOldNew\" src=\"/2015/02/21/Hello-World/old-out-new-in.jpg\"> Out with the old in with the new! Or at least that’s how the old adage goes.  I’ve been sitting on this web domain for two or so years now, trying to figure out what to do with it.  The main reason I hadn’t done much up to this point has more to do with the costs to host a site given the web technologies I desired to play around with, rather than the lack of motivation.  Of course my idea of keeping costs down pretty much meant I didn’t really want to pay anything at all!</p>\n<p>I sat down a year ago and tried to come up with the various ways I could cheaply host my personal website and also take advantage of the cool new cutting edge frameworks and programming languages popping up everyday.  I started exploring the popular cloud services such as <em>AWS, Microsoft Azure, and Google App Services</em>.  All three offered comparable options and at relatively low costs given the services they are providing.  But I wasn’t ready to take on the added expense of hosting a personal website just yet.</p>\n<p>While exploring cheap hosting options I came across the concept of ‘Static Site Generators’.  This was nothing new had has been around for quite some time. A Static Site Generator or (SSG) is a tool that takes a collection of files in one format, usually Markdown (MD) and converts them to another, usually HTML.  The result is an extremely fast, consistent website that can be hosted by any webserver regardless of platform.  An additional benefit of a static generated site is that your website pages can easily be versioned using a source control tool since the entire site is nothing more than flat text files.</p>\n<p>After exploring everything I could learn about SSG’s I was convinced this was the route I wanted to take.  Of course there were some obvious downsides I had to live with.  Static Websites are exactly that… Static.  This meant I couldn’t use any server side programming languages, or serve any dynamic content. When I really sthought about what this meant, I realized the only thing I’d likely be using dynamic content for were user comments and I already knew there were options out there to get around this limitation.</p>\n<p>At this point I just needed a cheap way to host the site. <strong>Enter Github Pages!!!</strong>  As a developer I was already familiar with <a href=\"http://www.github.com\" target=\"_blank\" rel=\"external\">Github</a> as an online Source Control repository for hosting public and private projects.  One of the features github provides is Github pages.  Every User and/or Organization gets one website per account that’s served by <a href=\"http://www.github.com\" target=\"_blank\" rel=\"external\">Github</a> for no charge at all.  This is exactly what I was looking for!  All I needed now was to figure out how to set it all up.</p>\n<p>In my next article I’ll go into detail about the following:</p>\n<ul>\n<li>How I went about choosing an SSG</li>\n<li>Details about setting up and using the SSG</li>\n<li>Publishing the generated site content to github pages so your site is publicly available.</li>\n</ul>\n<p><span class=\"pull-right\"><a href=\"/2015/02/28/Building-A-Website-With-Hexo-io/\">Next: Building A Site with Hexo.io</a></span></p>\n","source":"_posts/Hello-World.md","raw":"title: Hello-World\ndate: 2015-02-21 21:11:04\nupdated: 2015-03-01\ntags: Hexo\ncategories: Web Development\ncomments: true\n---\n<img id=\"HelloWorldOldNew\" src=\"/2015/02/21/Hello-World/old-out-new-in.jpg\"> Out with the old in with the new! Or at least that's how the old adage goes.  I've been sitting on this web domain for two or so years now, trying to figure out what to do with it.  The main reason I hadn't done much up to this point has more to do with the costs to host a site given the web technologies I desired to play around with, rather than the lack of motivation.  Of course my idea of keeping costs down pretty much meant I didn't really want to pay anything at all!\n\nI sat down a year ago and tried to come up with the various ways I could cheaply host my personal website and also take advantage of the cool new cutting edge frameworks and programming languages popping up everyday.  I started exploring the popular cloud services such as *AWS, Microsoft Azure, and Google App Services*.  All three offered comparable options and at relatively low costs given the services they are providing.  But I wasn't ready to take on the added expense of hosting a personal website just yet.\n\nWhile exploring cheap hosting options I came across the concept of 'Static Site Generators'.  This was nothing new had has been around for quite some time. A Static Site Generator or (SSG) is a tool that takes a collection of files in one format, usually Markdown (MD) and converts them to another, usually HTML.  The result is an extremely fast, consistent website that can be hosted by any webserver regardless of platform.  An additional benefit of a static generated site is that your website pages can easily be versioned using a source control tool since the entire site is nothing more than flat text files.\n\nAfter exploring everything I could learn about SSG's I was convinced this was the route I wanted to take.  Of course there were some obvious downsides I had to live with.  Static Websites are exactly that... Static.  This meant I couldn't use any server side programming languages, or serve any dynamic content. When I really sthought about what this meant, I realized the only thing I'd likely be using dynamic content for were user comments and I already knew there were options out there to get around this limitation.\n\nAt this point I just needed a cheap way to host the site. **Enter Github Pages!!!**  As a developer I was already familiar with <a href=\"http://www.github.com\">Github</a> as an online Source Control repository for hosting public and private projects.  One of the features github provides is Github pages.  Every User and/or Organization gets one website per account that's served by <a href=\"http://www.github.com\">Github</a> for no charge at all.  This is exactly what I was looking for!  All I needed now was to figure out how to set it all up.\n\nIn my next article I'll go into detail about the following:\n- How I went about choosing an SSG\n- Details about setting up and using the SSG\n- Publishing the generated site content to github pages so your site is publicly available.\n\n<span class=\"pull-right\"><a href=\"/2015/02/28/Building-A-Website-With-Hexo-io/\">Next: Building A Site with Hexo.io</a></span>\n","slug":"Hello-World","excerpt":"","_id":"k1c49e8si0g59eb1","layout":"post","photos":[],"link":"","path":"2015/02/21/Hello-World/","permalink":"http://michaelarnel.com/2015/02/21/Hello-World/","full_source":"/Users/marnel/WebProjects/MichaelArnelcom/source/_posts/Hello-World.md","asset_dir":"/Users/marnel/WebProjects/MichaelArnelcom/source/_posts/Hello-World/","tags":[{"name":"Hexo","_id":"lt0fuszygj5etqkb","posts":["r7ewh4ht47si7edh","k1c49e8si0g59eb1"],"slug":"Hexo","path":"tags/Hexo/","permalink":"http://michaelarnel.com/tags/Hexo/","length":2}],"categories":[{"name":"Web Development","_id":"z78uxvij8jx6l6kj","posts":["r7ewh4ht47si7edh","k1c49e8si0g59eb1"],"slug":"Web-Development","path":"categories/Web-Development/","permalink":"http://michaelarnel.com/categories/Web-Development/","length":2}]}]}